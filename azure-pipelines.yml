  
variables:
#  nodeVersion:
  NODE_MODULES_DIR: $(Build.SourcesDirectory)/node_modules
  hasDeploy: $[or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') )]
  isProduction: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]


trigger:
  branches:
    include:
    - develop
    - release/*
    - feature/*
  tags:
    include:
    - '*'
pr: none
    
pool:
  vmImage: ubuntu-latest
     
stages:
- stage: Prepare
  jobs:
  - job: "NpmInstall"
    steps:    
      - task: Cache@2
        inputs:
          key: 'node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json'
          restoreKeys: |
            node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json
            node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)"
            node_modules | "$(Agent.OS)"
            node_modules
          path: $(NODE_MODULES_DIR)
        displayName: Cache node modules
          
      - script: npm install 
        displayName: 'npm install'
        
- stage: QA
  condition: eq(variables.isProduction, false)
  jobs:
  - job: "Karma"
    steps:
      - task: Cache@2
        inputs:
          key: 'node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json'
          restoreKeys: |
            node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json
            node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)"
            node_modules | "$(Agent.OS)"
            node_modules
          path: $(NODE_MODULES_DIR)
        displayName: Cache node modules
        
      - script: npm run build
        displayName: 'run build'  
          
      - script: npm run test-ci
        displayName: 'run Karma'
          
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: JUnit
          testResultsFiles: '**/TESTS-*.xml'
          
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs: 
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'

- stage: Package
  dependsOn: [ 'Prepare', 'QA' ]
  condition: and(or(and(succeeded('Prepare'), succeeded('QA'), eq(variables.isProduction, false)), and(succeeded('Prepare'), eq(stageDependencies.QA.result,'Skipped'), eq(variables.isProduction, true))), eq(variables.hasDeploy, true))
  jobs:
  
  - job: PackageTest
    condition: eq(variables.isProduction, false)
    steps:
    - task: Cache@2
      inputs:
        key: 'node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json'
        restoreKeys: |
          node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json
          node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)"
          node_modules | "$(Agent.OS)"
          node_modules
        path: $(NODE_MODULES_DIR)
      displayName: Cache node modules
    
    - script: npm ci 
      displayName: 'npm install'
        
        
    - script: npm run build -- --configuration=test
      displayName: 'run build test'  
    
    - task: Docker@2
      inputs:
        containerRegistry: 'scaleway container registry'
        repository: 'azko-upsell/test-ui'
        command: 'buildAndPush'
        Dockerfile: './docker/prod/Dockerfile'
        buildContext: '.'
        tags: |
          $(Build.SourceBranchName)-$(Build.BuildNumber)
          $(Build.BuildId)
          develop-latest
      
    - task: ArchiveFiles@1
      displayName: Archive files
      inputs:
        rootFolder: dist/front
        includeRootFolder: false
        archiveType: default
        archiveFile: $(build.artifactstagingdirectory)/CRM-UI-build.zip
        replaceExistingArchive: true
        
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        artifactName: project-build
        
        
          
  - job: PackagePreprod
    condition: eq(variables.isProduction, true)
    steps: 
    - task: Cache@2
      inputs:
        key: 'node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json'
        restoreKeys: |
          node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json
          node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)"
          node_modules | "$(Agent.OS)"
          node_modules
        path: $(NODE_MODULES_DIR)
      displayName: Cache node modules
    
    - script: npm ci 
      displayName: 'npm install'
      
    - script: npm run build -- --configuration=preprod
      displayName: 'run build preprod'  

    - task: Docker@2
      inputs:
        containerRegistry: 'scaleway container registry'
        repository: 'azko-upsell/test-ui'
        command: 'buildAndPush'
        Dockerfile: './docker/prod/Dockerfile'
        buildContext: '.'
        tags: |
          $(Build.SourceBranchName)-rc
          $(Build.BuildId)
          preprod-latest

  - job: PackageProd
    condition: eq(variables.isProduction, true)
    steps: 
    - task: Cache@2
      inputs:
        key: 'node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json'
        restoreKeys: |
          node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | package-lock.json
          node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)"
          node_modules | "$(Agent.OS)"
          node_modules
        path: $(NODE_MODULES_DIR)
      displayName: Cache node modules
    
    - script: npm ci 
      displayName: 'npm install'
      
    - script: npm run build -- --configuration=production
      displayName: 'run build prod'  
       
    - task: Docker@2
      inputs:
        containerRegistry: 'scaleway container registry'
        repository: 'azko-upsell/test-ui'
        command: 'buildAndPush'
        Dockerfile: './docker/prod/Dockerfile'
        buildContext: '.'
        tags: |
          $(Build.SourceBranchName)
          $(Build.BuildId)
          latest
